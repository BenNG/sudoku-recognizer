set(CMAKE_CXX_STANDARD 11)

find_package( OpenCV 3.1.0 REQUIRED core text)
# find_package( Tesseract REQUIRED ) # 3.05 is currently the latest version of the git repository.
find_package(Boost 1.58 COMPONENTS system filesystem)

include_directories( ${OpenCV_INCLUDE_DIRS})
# include_directories(${Tesseract_INCLUDE_DIRS})
if(Boost_FOUND)
    include_directories(${Boost_INCLUDE_DIRS})
endif()

MESSAGE("OpenCV version : ${OpenCV_VERSION}")
# MESSAGE("Tesseract version : ${Tesseract_VERSION}")

add_library(Debug lib/debug.cpp lib/debug.h)
add_library(picture lib/utils/picture.cpp lib/utils/picture.h)
add_library(puzzle lib/utils/puzzle.cpp lib/utils/puzzle.h)
add_library(cell lib/utils/cell.cpp lib/utils/cell.h)
add_library(number lib/utils/number.cpp lib/utils/number.h)
add_library(mlp lib/mlp.cpp lib/mlp.h)
# add_library(createDataForTraining lib/preTraining/createDataForTraining.cpp lib/preTraining/createDataForTraining.h)
add_library(randomizeDataForTraining lib/preTraining/randomizeDataForTraining.cpp lib/preTraining/randomizeDataForTraining.h)
add_library(featurizeDataForTraining lib/preTraining/featurizeDataForTraining.cpp lib/preTraining/featurizeDataForTraining.h)
add_library(sudoku lib/utils/sudoku.cpp lib/utils/sudoku.h)
add_library(knn lib/knn.cpp lib/knn.h)
add_library(hello lib/hello.cpp lib/hello.h)

#Can manually add the sources using the set command as follows:
set(SOURCES main.cpp )

add_executable( ${PROJECT_NAME} ${SOURCES} )
add_executable( showExtracted lib/utils/showExtracted.cpp)
add_executable( showCells lib/utils/showCells.cpp)
add_executable( testKnn lib/utils/testKnn.cpp)
#add_executable( randomizeDataForTraining lib/randomizeDataForTraining.cpp)
#add_executable( featurizeDataForTraining lib/featurizeDataForTraining.cpp)

target_link_libraries( picture Debug)

# target_link_libraries( createDataForTraining ${OpenCV_LIBS} )
# # target_link_libraries( createDataForTraining ${Tesseract_LIBRARIES})
# target_link_libraries( createDataForTraining Debug)
# target_link_libraries( createDataForTraining picture)
# target_link_libraries( createDataForTraining puzzle)
# target_link_libraries( createDataForTraining cell)

target_link_libraries( featurizeDataForTraining ${OpenCV_LIBS} )
target_link_libraries( featurizeDataForTraining puzzle )

target_link_libraries( knn ${OpenCV_LIBS})
target_link_libraries( knn Debug)

target_link_libraries( cell ${OpenCV_LIBS} )

target_link_libraries( showExtracted puzzle )
target_link_libraries( showExtracted cell )
target_link_libraries( showExtracted Debug )
target_link_libraries( showExtracted mlp )
target_link_libraries( showExtracted picture )
target_link_libraries( showExtracted ${OpenCV_LIBS} )
target_link_libraries( showExtracted knn )
target_link_libraries( showExtracted hello )

target_link_libraries( showCells ${OpenCV_LIBS} )
target_link_libraries( showCells hello )
target_link_libraries( showCells Debug )
target_link_libraries( showCells picture )
target_link_libraries( showCells cell )
target_link_libraries( showCells puzzle )
target_link_libraries( showCells knn )

target_link_libraries( testKnn ${OpenCV_LIBS} )
target_link_libraries( testKnn hello )
target_link_libraries( testKnn Debug )
target_link_libraries( testKnn picture )
target_link_libraries( testKnn cell )
target_link_libraries( testKnn puzzle )
target_link_libraries( testKnn knn )

target_link_libraries( mlp ${OpenCV_LIBS} )

target_link_libraries( sudoku ${OpenCV_LIBS} )
target_link_libraries( sudoku randomizeDataForTraining )
# target_link_libraries( sudoku createDataForTraining )
target_link_libraries( sudoku featurizeDataForTraining )
target_link_libraries( sudoku mlp )
target_link_libraries( sudoku picture )
target_link_libraries( sudoku cell )

if(Boost_FOUND)
    target_link_libraries(showExtracted ${Boost_LIBRARIES} )
    target_link_libraries(showCells ${Boost_LIBRARIES} )
    # target_link_libraries(createDataForTraining ${Boost_LIBRARIES})
    target_link_libraries(randomizeDataForTraining ${Boost_LIBRARIES})
    target_link_libraries(featurizeDataForTraining ${Boost_LIBRARIES})
    target_link_libraries(sudoku ${Boost_LIBRARIES} )
    target_link_libraries(${PROJECT_NAME} ${Boost_LIBRARIES})
    target_link_libraries( Debug ${Boost_LIBRARIES})
    target_link_libraries( knn ${Boost_LIBRARIES})
endif()

target_link_libraries( ${PROJECT_NAME} ${OpenCV_LIBS} )
# target_link_libraries( ${PROJECT_NAME} ${Tesseract_LIBRARIES})
target_link_libraries( ${PROJECT_NAME} Debug )
target_link_libraries( ${PROJECT_NAME} picture )
target_link_libraries( ${PROJECT_NAME} puzzle )
target_link_libraries( ${PROJECT_NAME} mlp )
target_link_libraries( ${PROJECT_NAME} sudoku )
